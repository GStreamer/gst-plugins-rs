{
    "aws": {
        "description": "GStreamer Amazon Web Services plugin",
        "elements": {
            "awss3hlssink": {
                "author": "Daily. Co",
                "description": "Streams HLS data to S3",
                "hierarchy": [
                    "GstAwsS3HlsSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic",
                "long-name": "S3 HLS Sink",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "acl": {
                        "blurb": "Canned ACL to use for uploading to S3",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "private",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bucket": {
                        "blurb": "The bucket of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "endpoint-uri": {
                        "blurb": "The S3 endpoint URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "hlssink": {
                        "blurb": "The underlying HLS sink being used",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": false
                    },
                    "key-prefix": {
                        "blurb": "The key prefix for segment and playlist files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "region": {
                        "blurb": "The AWS region for the S3 bucket (e.g. eu-west-2).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "us-west-2",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "request-timeout": {
                        "blurb": "Timeout for request to S3 service (in ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "retry-attempts": {
                        "blurb": "Number of times AWS SDK attempts a request before abandoning the request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary session token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stats, num-uploads-started=(int)0, num-uploads-completed=(int)0, num-bytes-uploaded=(int)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "none"
            },
            "awss3sink": {
                "author": "Marcin Kolny <mkolny@amazon.com>",
                "description": "Writes an object to Amazon S3",
                "hierarchy": [
                    "GstAwsS3Sink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "long-name": "Amazon S3 sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bucket": {
                        "blurb": "The bucket of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "complete-upload-request-timeout": {
                        "blurb": "Timeout for the complete multipart upload request (in ms, set to -1 for infinity) (Deprecated. Use request-timeout.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "complete-upload-retry-duration": {
                        "blurb": "How long we should retry complete multipart upload requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "endpoint-uri": {
                        "blurb": "The S3 endpoint URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "key": {
                        "blurb": "The key of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "metadata": {
                        "blurb": "A map of metadata to store with the object in S3; field values need to be convertible to strings.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "on-error": {
                        "blurb": "Do nothing, abort or complete a multipart upload request on error",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "nothing (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstS3SinkOnError",
                        "writable": true
                    },
                    "part-size": {
                        "blurb": "A size (in bytes) of an individual part used for multipart upload.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5242880",
                        "max": "5368709120",
                        "min": "5242880",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "region": {
                        "blurb": "An AWS region (e.g. eu-west-2).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "us-west-2",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "request-timeout": {
                        "blurb": "Timeout for general S3 requests (in ms, set to -1 for infinity)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "retry-attempts": {
                        "blurb": "Number of times AWS SDK attempts a request before abandoning the request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "retry-duration": {
                        "blurb": "How long we should retry general S3 requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "upload-part-request-timeout": {
                        "blurb": "Timeout for a single upload part request (in ms, set to -1 for infinity) (Deprecated. Use request-timeout.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "upload-part-retry-duration": {
                        "blurb": "How long we should retry upload part requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "The S3 object URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "awss3src": {
                "author": "Arun Raghavan <arun@arunraghavan.net>",
                "description": "Reads an object from Amazon S3",
                "hierarchy": [
                    "GstAwsS3Src",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "long-name": "Amazon S3 source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "endpoint-uri": {
                        "blurb": "The S3 endpoint URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "request-timeout": {
                        "blurb": "Timeout for each S3 request (in ms, set to -1 for infinity)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "retry-attempts": {
                        "blurb": "Number of times AWS SDK attempts a request before abandoning the request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "retry-duration": {
                        "blurb": "How long we should retry S3 requests before giving up (in ms, set to -1 for infinity) (Deprecated. Use retry-attempts.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "75000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "The S3 object URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "awstranscribeparse": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Parses AWS transcripts into timed text buffers",
                "hierarchy": [
                    "GstAwsTranscribeParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Subtitle",
                "long-name": "AWS transcript parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-json:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "awstranscriber": {
                "author": "Jordan Petridis <jordan@centricular.com>, Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Speech to Text filter, using AWS transcribe",
                "hierarchy": [
                    "GstAwsTranscriber",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Audio/Text/Filter",
                "long-name": "Transcriber",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 8000, 48000 ]\n       channels: 1\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: S16LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "access-key": {
                        "blurb": "AWS Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "language-code": {
                        "blurb": "The Language of the Stream, see <https://docs.aws.amazon.com/transcribe/latest/dg/how-streaming-transcription.html> for an up to date list of allowed languages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "en-US",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow AWS transcribe",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "lateness": {
                        "blurb": "Amount of milliseconds to introduce as lateness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "results-stability": {
                        "blurb": "Defines how fast results should stabilize",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "low (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberResultStability",
                        "writable": true
                    },
                    "secret-access-key": {
                        "blurb": "AWS Secret Access Key",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-id": {
                        "blurb": "The ID of the transcription session, must be length 36",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "session-token": {
                        "blurb": "AWS temporary Session Token from STS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "vocabulary-filter-method": {
                        "blurb": "Defines how filtered words will be edited, has no effect when vocabulary-filter-name isn't set",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "mask (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAwsTranscriberVocabularyFilterMethod",
                        "writable": true
                    },
                    "vocabulary-filter-name": {
                        "blurb": "The name of a custom filter vocabulary, see <https://docs.aws.amazon.com/transcribe/latest/help-panel/vocab-filter.html> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "vocabulary-name": {
                        "blurb": "The name of a custom vocabulary, see <https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstaws",
        "license": "MPL",
        "other-types": {
            "GstAwsTranscriberResultStability": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "High: stabilize results as fast as possible",
                        "name": "high",
                        "value": "0"
                    },
                    {
                        "desc": "Medium: balance between stability and accuracy",
                        "name": "medium",
                        "value": "1"
                    },
                    {
                        "desc": "Low: relatively less stable partial transcription results with higher accuracy",
                        "name": "low",
                        "value": "2"
                    }
                ]
            },
            "GstAwsTranscriberVocabularyFilterMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Mask: replace words with ***",
                        "name": "mask",
                        "value": "0"
                    },
                    {
                        "desc": "Remove: delete words",
                        "name": "remove",
                        "value": "1"
                    },
                    {
                        "desc": "Tag: flag words without changing them",
                        "name": "tag",
                        "value": "2"
                    }
                ]
            },
            "GstS3SinkOnError": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Abort: Abort multipart upload on error.",
                        "name": "abort",
                        "value": "0"
                    },
                    {
                        "desc": "Complete: Complete multipart upload on error.",
                        "name": "complete",
                        "value": "1"
                    },
                    {
                        "desc": "DoNothing: Do nothing on error.",
                        "name": "nothing",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-aws",
        "source": "gst-plugin-aws",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "cdg": {
        "description": "GStreamer CDG codec Plugin",
        "elements": {
            "cdgdec": {
                "author": "Guillaume Desmottes <guillaume.desmottes@collabora.com>",
                "description": "CDG decoder",
                "hierarchy": [
                    "GstCdgDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Decoder/Video",
                "long-name": "CDG decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-cdg:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: RGBA\n          width: 300\n         height: 216\n      framerate: 0/1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "cdgparse": {
                "author": "Guillaume Desmottes <guillaume.desmottes@collabora.com>",
                "description": "CDG parser",
                "hierarchy": [
                    "GstCdgParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Video",
                "long-name": "CDG parser",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-cdg:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-cdg:\n          width: 300\n         height: 216\n      framerate: 0/1\n         parsed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstcdg",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-cdg",
        "source": "gst-plugin-cdg",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "claxon": {
        "description": "GStreamer Claxon FLAC Decoder Plugin",
        "elements": {
            "claxondec": {
                "author": "Ruben Gonzalez <rgonzalez@fluendo.com>",
                "description": "Claxon FLAC decoder",
                "hierarchy": [
                    "GstClaxonDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Decoder/Audio",
                "long-name": "Claxon FLAC decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-flac:\n         framed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 655349 ]\n       channels: [ 1, 7 ]\n         layout: interleaved\n         format: { S8, S16LE, S24_32LE, S32LE }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstclaxon",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-claxon",
        "source": "gst-plugin-claxon",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "csound": {
        "description": "GStreamer Audio Filter plugin based on Csound",
        "elements": {
            "csoundfilter": {
                "author": "Natanael Mojica <neithanmo@gmail.com>",
                "description": "Implement an audio filter/effects using Csound",
                "hierarchy": [
                    "GstCsoundFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "csd-text": {
                        "blurb": "The content of a csd file passed as a String.\n                    Use either location or csd-text but not both at the same time, if so and error would be triggered",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of the csd file to be used by csound.\n                    Use either location or CSD-text but not both at the same time, if so and error would be triggered",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "loop over the score (can be changed in PLAYING or PAUSED state)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "score-offset": {
                        "blurb": "Score offset in seconds to start the performance",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstcsound",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-csound",
        "source": "gst-plugin-csound",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "dav1d": {
        "description": "GStreamer dav1d AV1 decoder Plugin",
        "elements": {
            "dav1ddec": {
                "author": "Philippe Normand <philn@igalia.com>",
                "description": "Decode AV1 video streams with dav1d",
                "hierarchy": [
                    "GstDav1dDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "Dav1d AV1 Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-av1:\n  stream-format: obu-stream\n      alignment: { (string)frame, (string)tu }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { GRAY8, GRAY16_LE, I420, Y42B, Y444, I420_10LE, I422_10LE, Y444_10LE, I420_12LE, I422_12LE, Y444_12LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "max-frame-delay": {
                        "blurb": "Maximum delay in frames for the decoder (set to 1 for low latency, 0 to be equal to the number of logical cores. -1 to choose between these two based on pipeline liveness)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "4294967295",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "n-threads": {
                        "blurb": "Number of threads to use while decoding (set to 0 to use number of logical cores)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstdav1d",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-dav1d",
        "source": "gst-plugin-dav1d",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "fallbackswitch": {
        "description": "GStreamer Fallback Switcher and Source Plugin",
        "elements": {
            "fallbacksrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Live source with uridecodebin3 or custom source, and fallback stream",
                "hierarchy": [
                    "GstFallbackSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Source",
                "long-name": "Fallback Source",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "buffer-duration": {
                        "blurb": "Buffer duration when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775806",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "enable-audio": {
                        "blurb": "Enable the audio stream, this will output silence if there's no audio in the configured URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-video": {
                        "blurb": "Enable the video stream, this will output black or the fallback video if there's no video in the configured URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fallback-audio-caps": {
                        "blurb": "Raw audio caps for fallback stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "fallback-uri": {
                        "blurb": "Fallback URI to use for video in case the main stream doesn't work",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "fallback-video-caps": {
                        "blurb": "Raw video caps for fallback stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "immediate-fallback": {
                        "blurb": "Forward the fallback streams immediately at startup, when the primary streams are slow to start up and immediate output is required",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "manual-unblock": {
                        "blurb": "When enabled, the application must call the unblock signal, except for live streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "min-latency": {
                        "blurb": "When the main source has a higher latency than the fallback source this allows to configure a minimum latency that would be configured if initially the fallback is enabled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "restart-on-eos": {
                        "blurb": "Restart source on EOS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "restart-timeout": {
                        "blurb": "Timeout for restarting an active source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "retry-timeout": {
                        "blurb": "Timeout for stopping after repeated failure",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "source": {
                        "blurb": "Source to use instead of the URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "statistics": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-fallbacksrc-stats, num-retry=(guint64)0, num-fallback-retry=(guint64)0, last-retry-reason=(GstFallbackSourceRetryReason)none, last-fallback-retry-reason=(GstFallbackSourceRetryReason)none, buffering-percent=(int)100, fallback-buffering-percent=(int)100;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "status": {
                        "blurb": "Current source status",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stopped (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFallbackSourceStatus",
                        "writable": false
                    },
                    "timeout": {
                        "blurb": "Timeout for switching to the fallback URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "URI to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "unblock": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "update-uri": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gchararray",
                        "when": "last"
                    }
                }
            },
            "fallbackswitch": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Priority-based automatic input selector element",
                "hierarchy": [
                    "GstFallbackSwitch",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic",
                "long-name": "Priority-based input selector",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFallbackSwitchSinkPad"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "active-pad": {
                        "blurb": "Currently active pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstPad",
                        "writable": true
                    },
                    "auto-switch": {
                        "blurb": "Automatically switch pads (If true, use the priority pad property, otherwise manual selection via the active-pad property)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "immediate-fallback": {
                        "blurb": "Forward lower-priority streams immediately at startup, when the stream with priority 0 is slow to start up and immediate output is required",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Additional latency in live mode to allow upstream to take longer to produce buffers for the current position (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-upstream-latency": {
                        "blurb": "When sources with a higher latency are expected to be plugged in dynamically after the fallbackswitch has started playing, this allows overriding the minimum latency reported by the initial source(s). This is only taken into account when larger than the actually reported minimum latency. (nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Timeout on an input before switching to a lower priority input.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstfallbackswitch",
        "license": "MPL",
        "other-types": {
            "GstFallbackSourceStatus": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Stopped",
                        "name": "stopped",
                        "value": "0"
                    },
                    {
                        "desc": "Buffering",
                        "name": "buffering",
                        "value": "1"
                    },
                    {
                        "desc": "Retrying",
                        "name": "retrying",
                        "value": "2"
                    },
                    {
                        "desc": "Running",
                        "name": "running",
                        "value": "3"
                    }
                ]
            },
            "GstFallbackSwitchSinkPad": {
                "hierarchy": [
                    "GstFallbackSwitchSinkPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "is-healthy": {
                        "blurb": "Whether this stream is healthy",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "priority": {
                        "blurb": "Selection priority for this stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-fallbackswitch",
        "source": "gst-plugin-fallbackswitch",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "ffv1": {
        "description": "GStreamer FFV1 Decoder Plugin",
        "elements": {
            "ffv1dec": {
                "author": "Arun Raghavan <arun@asymptotic.io>",
                "description": "Decode FFV1 video streams",
                "hierarchy": [
                    "GstFfv1Dec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "FFV1 Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-ffv:\n     ffvversion: 1\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { GRAY8, GRAY16_LE, GRAY16_BE, Y444, Y444_10LE, Y444_10BE, A444_10LE, A444_10BE, Y444_12LE, Y444_12BE, Y444_16LE, Y444_16BE, A420, Y42B, I422_10LE, I422_10BE, A422_10LE, A422_10BE, I422_12LE, I422_12BE, I420, I420_10LE, I420_10BE, I420_12LE, I420_12BE, GBRA, GBR, GBR_10LE, GBR_10BE, GBRA_10LE, GBRA_10BE, GBR_12LE, GBR_12BE, GBRA_12LE, GBRA_12BE, Y41B, YUV9 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary + 1"
            }
        },
        "filename": "gstffv1",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-ffv1",
        "source": "gst-plugin-ffv1",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "fmp4": {
        "description": "GStreamer Fragmented MP4 Plugin",
        "elements": {
            "cmafmux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "CMAF fragmented MP4 muxer",
                "hierarchy": [
                    "GstCMAFMux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "long-name": "CMAFMux",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: cmaf\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "dashmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "DASH fragmented MP4 muxer",
                "hierarchy": [
                    "GstDASHMP4Mux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "long-name": "DASHMP4Mux",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso-fragmented\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "isofmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ISO fragmented MP4 muxer",
                "hierarchy": [
                    "GstISOFMP4Mux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "long-name": "ISOFMP4Mux",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso-fragmented\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "offset-to-zero": {
                        "blurb": "Offsets all streams so that the earliest stream starts at 0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "onviffmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ONVIF fragmented MP4 muxer",
                "hierarchy": [
                    "GstONVIFFMP4Mux",
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "long-name": "ONVIFFMP4Mux",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nimage/jpeg:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-alaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-mulaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: g726\n       channels: 1\n           rate: 8000\n        bitrate: { (int)16000, (int)24000, (int)32000, (int)40000 }\napplication/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso-fragmented\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstfmp4",
        "license": "MPL",
        "other-types": {
            "GstFMP4Mux": {
                "hierarchy": [
                    "GstFMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "chunk-duration": {
                        "blurb": "Duration for each FMP4 chunk (default = no chunks)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "fragment-duration": {
                        "blurb": "Duration for each FMP4 fragment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "header-update-mode": {
                        "blurb": "Mode for updating the header at the end of the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstFMP4MuxHeaderUpdateMode",
                        "writable": true
                    },
                    "interleave-bytes": {
                        "blurb": "Interleave between streams in bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "interleave-time": {
                        "blurb": "Interleave between streams in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "250000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "movie-timescale": {
                        "blurb": "Timescale to use for the movie (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "write-mehd": {
                        "blurb": "Write movie extends header box with the duration at the end of the stream (needs a header-update-mode enabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "write-mfra": {
                        "blurb": "Write fragment random access box at the end of the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                }
            },
            "GstFMP4MuxHeaderUpdateMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Rewrite",
                        "name": "rewrite",
                        "value": "1"
                    },
                    {
                        "desc": "Update",
                        "name": "update",
                        "value": "2"
                    }
                ]
            },
            "GstFMP4MuxPad": {
                "hierarchy": [
                    "GstFMP4MuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "trak-timescale": {
                        "blurb": "Timescale to use for the track (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-fmp4",
        "source": "gst-plugin-fmp4",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "gif": {
        "description": "GStreamer GIF plugin",
        "elements": {
            "gifenc": {
                "author": "Markus Ebner <info@ebner-markus.de>",
                "description": "GIF encoder",
                "hierarchy": [
                    "GstGifEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Encoder/Video",
                "long-name": "GIF encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483599/21474836 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/gif:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "repeat": {
                        "blurb": "Repeat (-1 to loop forever, 0 .. n finite repetitions)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "speed": {
                        "blurb": "Speed (1 .. 30; higher value yields faster encoding)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "30",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstgif",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-gif",
        "source": "gst-plugin-gif",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "gtk4": {
        "description": "GStreamer GTK 4 Sink element and Paintable widget",
        "elements": {
            "gtk4paintablesink": {
                "author": "Bilal Elmoussaoui <bil.elmoussaoui@gmail.com>, Jordan Petridis <jordan@centricular.com>, Sebastian Dröge <sebastian@centricular.com>",
                "description": "A GTK 4 Paintable sink",
                "hierarchy": [
                    "GstGtk4PaintableSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Video",
                "long-name": "GTK 4 Paintable Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: { BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoOverlayComposition):\n         format: { BGRA, ARGB, RGBA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "paintable": {
                        "blurb": "The Paintable the sink renders to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GdkPaintable",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstgtk4",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-gtk4",
        "source": "gst-plugin-gtk4",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "hlssink3": {
        "description": "GStreamer HLS (HTTP Live Streaming) Plugin",
        "elements": {
            "hlssink3": {
                "author": "Alessandro Decina <alessandro.d@gmail.com>, Sebastian Dröge <sebastian@centricular.com>, Rafael Caricio <rafael@caricio.com>",
                "description": "HTTP Live Streaming sink",
                "hierarchy": [
                    "GstHlsSink3",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Muxer",
                "long-name": "HTTP Live Streaming sink",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Location of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "segment%%05d.ts",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "max-files": {
                        "blurb": "Maximum number of files to keep on disk. Once the maximum is reached, old files start to be deleted to make room for new ones.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "playlist-length": {
                        "blurb": "Length of HLS playlist. To allow players to conform to section 6.3.3 of the HLS specification, this should be at least 3. If set to 0, the playlist will be infinite.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "playlist-location": {
                        "blurb": "Location of the playlist to write.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "playlist.m3u8",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "playlist-root": {
                        "blurb": "Base path for the segments in the playlist file.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "playlist-type": {
                        "blurb": "The type of the playlist to use. When VOD type is set, the playlist will be live until the pipeline ends execution.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "Unspecified (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstHlsSink3PlaylistType",
                        "writable": true
                    },
                    "send-keyframe-requests": {
                        "blurb": "Send keyframe requests to ensure correct fragmentation. If this is disabled then the input must have keyframes in regular intervals.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "target-duration": {
                        "blurb": "The target duration in seconds of a segment/file. (0 - disabled, useful for management of segment duration by the streaming server)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "delete-fragment": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "get-fragment-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    },
                    "get-playlist-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GOutputStream",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gsthlssink3",
        "license": "MPL",
        "other-types": {
            "GstHlsSink3PlaylistType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Unspecified: The tag `#EXT-X-PLAYLIST-TYPE` won't be present in the playlist during the pipeline processing.",
                        "name": "Unspecified",
                        "value": "0"
                    },
                    {
                        "desc": "Event: No segments will be removed from the playlist. At the end of the processing, the tag `#EXT-X-ENDLIST` is added to the playlist. The tag `#EXT-X-PLAYLIST-TYPE:EVENT` will be present in the playlist.",
                        "name": "event",
                        "value": "1"
                    },
                    {
                        "desc": "Vod: The playlist behaves like the `event` option (a live event), but at the end of the processing, the playlist will be set to `#EXT-X-PLAYLIST-TYPE:VOD`.",
                        "name": "vod",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-hlssink3",
        "source": "gst-plugin-hlssink3",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "hsv": {
        "description": "GStreamer plugin with HSV manipulation elements",
        "elements": {
            "hsvdetector": {
                "author": "Julien Bardagi <julien.bardagi@gmail.com>",
                "description": "Works within the HSV colorspace to mark positive pixels",
                "hierarchy": [
                    "GstHsvDetector",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Converter/Video",
                "long-name": "HSV detector",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBA, ARGB, BGRA, ABGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hue-ref": {
                        "blurb": "Hue reference in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "hue-var": {
                        "blurb": "Allowed hue variation from the reference hue angle, in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "180",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-ref": {
                        "blurb": "Reference saturation value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-var": {
                        "blurb": "Allowed saturation variation from the reference value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.15",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-ref": {
                        "blurb": "Reference value value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-var": {
                        "blurb": "Allowed value variation from the reference value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.3",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "hsvfilter": {
                "author": "Julien Bardagi <julien.bardagi@gmail.com>",
                "description": "Works within the HSV colorspace to apply tranformations to incoming frames",
                "hierarchy": [
                    "GstHsvFilter",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Converter/Video",
                "long-name": "HSV filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, RGB, BGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hue-shift": {
                        "blurb": "Hue shifting in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-mul": {
                        "blurb": "Saturation multiplier to apply to the saturation value (before offset)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "saturation-off": {
                        "blurb": "Saturation offset to add to the saturation value (after multiplier)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-mul": {
                        "blurb": "Value multiplier to apply to the value (before offset)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "value-off": {
                        "blurb": "Value offset to add to the value (after multiplier)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsthsv",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-hsv",
        "source": "gst-plugin-hsv",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "json": {
        "description": "GStreamer JSON Plugin",
        "elements": {
            "jsongstenc": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Wraps buffers containing any valid top-level JSON structures into higher level JSON objects, and outputs those as ndjson",
                "hierarchy": [
                    "GstJsonGstEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/JSON",
                "long-name": "GStreamer buffers to JSON",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-json:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "jsongstparse": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Parses ndjson as output by jsongstenc",
                "hierarchy": [
                    "GstJsonGstParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Parser/JSON",
                "long-name": "JSON GStreamer parser",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstjson",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-json",
        "source": "gst-plugin-json",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "lewton": {
        "description": "GStreamer lewton Vorbis Decoder Plugin",
        "elements": {
            "lewtondec": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "lewton Vorbis decoder",
                "hierarchy": [
                    "GstLewtonDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Decoder/Audio",
                "long-name": "lewton Vorbis decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 255 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstlewton",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-lewton",
        "source": "gst-plugin-lewton",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "livesync": {
        "description": "Livesync Plugin",
        "elements": {
            "livesync": {
                "author": "Jan Alexander Steffens (heftig) <jan.steffens@ltnglobal.com>",
                "description": "Outputs livestream, inserting gap frames when input lags",
                "hierarchy": [
                    "GstLiveSync",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter",
                "long-name": "Live Synchronizer",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "drop": {
                        "blurb": "Number of incoming frames dropped",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "duplicate": {
                        "blurb": "Number of outgoing frames duplicated",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "in": {
                        "blurb": "Number of incoming frames accepted",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "late-threshold": {
                        "blurb": "Maximum time spent (in nanoseconds) before accepting one late buffer; -1 = never",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Additional latency to allow upstream to take longer to produce buffers for the current position (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "out": {
                        "blurb": "Number of outgoing frames produced",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "single-segment": {
                        "blurb": "Timestamp buffers and eat segments so as to appear as one segment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstlivesync",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-livesync",
        "source": "gst-plugin-livesync",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "mp4": {
        "description": "GStreamer Rust MP4 Plugin",
        "elements": {
            "isomp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ISO MP4 muxer",
                "hierarchy": [
                    "GstISOMP4Mux",
                    "GstRsMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n bit-depth-luma: { (uint)8, (uint)10, (uint)12 }\nbit-depth-chroma: { (uint)8, (uint)10, (uint)12 }\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstRsMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "onvifmp4mux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "ONVIF MP4 muxer",
                "hierarchy": [
                    "GstONVIFMP4Mux",
                    "GstRsMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\nimage/jpeg:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 65535 ]\n           rate: [ 1, 2147483647 ]\naudio/x-alaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-mulaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: g726\n       channels: 1\n           rate: 8000\n        bitrate: { (int)16000, (int)24000, (int)32000, (int)40000 }\napplication/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstRsMP4MuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstmp4",
        "license": "MPL",
        "other-types": {
            "GstRsMP4Mux": {
                "hierarchy": [
                    "GstRsMP4Mux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "interleave-bytes": {
                        "blurb": "Interleave between streams in bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "interleave-time": {
                        "blurb": "Interleave between streams in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "movie-timescale": {
                        "blurb": "Timescale to use for the movie (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            },
            "GstRsMP4MuxPad": {
                "hierarchy": [
                    "GstRsMP4MuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "trak-timescale": {
                        "blurb": "Timescale to use for the track (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            }
        },
        "package": "gst-plugin-mp4",
        "source": "gst-plugin-mp4",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "ndi": {
        "description": "GStreamer NewTek NDI Plugin",
        "elements": {
            "ndisink": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI Sink",
                "hierarchy": [
                    "GstNdiSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Audio/Video",
                "long-name": "NewTek NDI Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { UYVY, I420, NV12, NV21, YV12, BGRA, BGRx, RGBA, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\naudio/x-raw:\n         format: F32LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ndi-name": {
                        "blurb": "NDI Name to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ndisinkcombiner": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI sink audio/video combiner",
                "hierarchy": [
                    "GstNdiSinkCombiner",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Combiner/Audio/Video",
                "long-name": "NewTek NDI Sink Combiner",
                "pad-templates": {
                    "audio": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483646 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstAggregatorPad"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { UYVY, I420, NV12, NV21, YV12, BGRA, BGRx, RGBA, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/2147483647, 2147483646/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "video": {
                        "caps": "video/x-raw:\n         format: { UYVY, I420, NV12, NV21, YV12, BGRA, BGRx, RGBA, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/2147483647, 2147483646/1 ]\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "rank": "none"
            },
            "ndisrc": {
                "author": "Ruben Gonzalez <rubenrua@teltek.es>, Daniel Vilar <daniel.peiteado@teltek.es>, Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI Source",
                "hierarchy": [
                    "GstNdiSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio/Video/Network",
                "long-name": "NewTek NDI Source",
                "pad-templates": {
                    "src": {
                        "caps": "application/x-ndi:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bandwidth": {
                        "blurb": "Bandwidth, -10 metadata-only, 10 audio-only, 100 highest",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "100",
                        "min": "-10",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "color-format": {
                        "blurb": "Receive color format",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "uyvy-bgra (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstNdiRecvColorFormat",
                        "writable": true
                    },
                    "connect-timeout": {
                        "blurb": "Connection timeout in ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-queue-length": {
                        "blurb": "Maximum receive queue length",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "ndi-name": {
                        "blurb": "NDI stream name of the sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "receiver-ndi-name": {
                        "blurb": "NDI stream name of this receiver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Receive timeout in ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "timestamp-mode": {
                        "blurb": "Timestamp information to use for outgoing PTS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstNdiTimestampMode",
                        "writable": true
                    },
                    "url-address": {
                        "blurb": "URL/address and port of the sender, e.g. 127.0.0.1:5961",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ndisrcdemux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "NewTek NDI source demuxer",
                "hierarchy": [
                    "GstNdiSrcDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Demuxer/Audio/Video",
                "long-name": "NewTek NDI Source Demuxer",
                "pad-templates": {
                    "audio": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "application/x-ndi:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstndi",
        "license": "MPL",
        "other-types": {
            "GstNdiRecvColorFormat": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "BGRX or BGRA",
                        "name": "bgrx-bgra",
                        "value": "0"
                    },
                    {
                        "desc": "UYVY or BGRA",
                        "name": "uyvy-bgra",
                        "value": "1"
                    },
                    {
                        "desc": "RGBX or RGBA",
                        "name": "rgbx-rgba",
                        "value": "2"
                    },
                    {
                        "desc": "UYVY or RGBA",
                        "name": "uyvy-rgba",
                        "value": "3"
                    },
                    {
                        "desc": "Fastest",
                        "name": "fastest",
                        "value": "4"
                    },
                    {
                        "desc": "Best",
                        "name": "best",
                        "value": "5"
                    }
                ]
            },
            "GstNdiTimestampMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "Receive Time / Timecode",
                        "name": "receive-time-vs-timecode",
                        "value": "1"
                    },
                    {
                        "desc": "Receive Time / Timestamp",
                        "name": "receive-time-vs-timestamp",
                        "value": "2"
                    },
                    {
                        "desc": "NDI Timecode",
                        "name": "timecode",
                        "value": "3"
                    },
                    {
                        "desc": "NDI Timestamp",
                        "name": "timestamp",
                        "value": "4"
                    },
                    {
                        "desc": "Receive Time",
                        "name": "receive-time",
                        "value": "5"
                    }
                ]
            }
        },
        "package": "gst-plugin-ndi",
        "source": "gst-plugin-ndi",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "raptorq": {
        "description": "GStreamer RaptorQ FEC Plugin",
        "elements": {
            "raptorqdec": {
                "author": "Tomasz Andrzejak <andreiltd@gmail.com>",
                "description": "Performs FEC using RaptorQ (RFC6681, RFC6682)",
                "hierarchy": [
                    "GstRaptorqDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "RTP RaptorQ FEC Decoding",
                "long-name": "RTP RaptorQ FEC Decoder",
                "pad-templates": {
                    "fec_%%u": {
                        "caps": "application/x-rtp:\nraptor-scheme-id: 6\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "media-packets-reset-threshold": {
                        "blurb": "This is the maximum allowed number of buffered packets, before we reset the decoder. It can only be triggered if we don't receive repair packets for too long, or packets have no valid timestamps, (0 - disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "-2",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "repair-window-tolerance": {
                        "blurb": "The amount of time to add to repair-window reported by RaptorQ encoder (in ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500",
                        "max": "-2",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-raptorqdec-stats, received-packets=(guint64)0, lost-packets=(guint64)0, recovered-packets=(guint64)0, buffered-media-packets=(guint64)0, buffered-repair-packets=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "marginal"
            },
            "raptorqenc": {
                "author": "Tomasz Andrzejak <andreiltd@gmail.com>",
                "description": "Performs FEC using RaptorQ (RFC6681, RFC6682)",
                "hierarchy": [
                    "GstRaptorqEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "RTP RaptorQ FEC Encoding",
                "long-name": "RTP RaptorQ FEC Encoder",
                "pad-templates": {
                    "fec_0": {
                        "caps": "application/x-rtp:\n     clock-rate: [ 0, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "sink": {
                        "caps": "application/x-rtp:\n     clock-rate: [ 0, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n     clock-rate: [ 0, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mtu": {
                        "blurb": "Maximum expected packet size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1400",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "protected-packets": {
                        "blurb": "Number of packets to protect together",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25",
                        "max": "-2",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "The payload type of FEC packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "97",
                        "max": "255",
                        "min": "96",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "repair-packets": {
                        "blurb": "Number of repair packets per block to send",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "-2",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "repair-window": {
                        "blurb": "A time span in milliseconds in which repair packets are send",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "50",
                        "max": "-2",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "symbol-size": {
                        "blurb": "Size of RaptorQ data unit",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1408",
                        "max": "-2",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstraptorq",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-raptorq",
        "source": "gst-plugin-raptorq",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rav1e": {
        "description": "GStreamer rav1e AV1 Encoder Plugin",
        "elements": {
            "rav1enc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "rav1e AV1 encoder",
                "hierarchy": [
                    "GstRav1Enc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Encoder/Video",
                "long-name": "rav1e AV1 encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { I420, Y42B, Y444, I420_10LE, I422_10LE, Y444_10LE, I420_12LE, I422_12LE, Y444_12LE, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bitrate": {
                        "blurb": "Bitrate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "error-resilient": {
                        "blurb": "Error Resilient",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "low-latency": {
                        "blurb": "Low Latency",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-key-frame-interval": {
                        "blurb": "Max Key Frame Interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "240",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-key-frame-interval": {
                        "blurb": "Min Key Frame Interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "12",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-quantizer": {
                        "blurb": "Min Quantizer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "quantizer": {
                        "blurb": "Quantizer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rdo-lookahead-frames": {
                        "blurb": "RDO Lookahead Frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "reservoir-frame-delay": {
                        "blurb": "Reservoir Frame Delay",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-2147483648",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "speed-preset": {
                        "blurb": "Speed preset (10 fastest, 0 slowest)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "6",
                        "max": "10",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "switch-frame-interval": {
                        "blurb": "Switch Frame Interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "threads": {
                        "blurb": "Threads",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tile-cols": {
                        "blurb": "Tile Cols",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tile-rows": {
                        "blurb": "Tile Rows",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tiles": {
                        "blurb": "Tiles",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tune": {
                        "blurb": "Tune",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "psychovisual (1)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRav1eEncTune",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrav1e",
        "license": "MIT/X11",
        "other-types": {
            "GstRav1eEncTune": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Psnr",
                        "name": "psnr",
                        "value": "0"
                    },
                    {
                        "desc": "Psychovisual",
                        "name": "psychovisual",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "gst-plugin-rav1e",
        "source": "gst-plugin-rav1e",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "regex": {
        "description": "GStreamer Regular Expression Plugin",
        "elements": {
            "regex": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Applies operations according to regular expressions",
                "hierarchy": [
                    "GstRegEx",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "long-name": "Regular Expression processor",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "commands": {
                        "blurb": "A set of commands to apply on input text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstregex",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-regex",
        "source": "gst-plugin-regex",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "reqwest": {
        "description": "GStreamer reqwest HTTP Source Plugin",
        "elements": {
            "reqwesthttpsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Read stream from an HTTP/HTTPS location",
                "hierarchy": [
                    "GstReqwestHttpSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network/HTTP",
                "long-name": "HTTP Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "compress": {
                        "blurb": "Allow compressed content encodings",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "cookies": {
                        "blurb": "NULL",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GStrv",
                        "writable": true
                    },
                    "extra-headers": {
                        "blurb": "Extra headers to append to the HTTP request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "iradio-mode": {
                        "blurb": "Enable internet radio mode (ask server to send shoutcast/icecast metadata interleaved with the actual stream data",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Act like a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "keep-alive": {
                        "blurb": "Use HTTP persistent connections",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "location": {
                        "blurb": "URL to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy": {
                        "blurb": "HTTP proxy server URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-id": {
                        "blurb": "HTTP proxy URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-pw": {
                        "blurb": "HTTP proxy URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout a blocking I/O (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "user-agent": {
                        "blurb": "Value of the User-Agent HTTP request header field",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer reqwesthttpsrc",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-id": {
                        "blurb": "HTTP location URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-pw": {
                        "blurb": "HTTP location URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstreqwest",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-reqwest",
        "source": "gst-plugin-reqwest",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsaudiofx": {
        "description": "GStreamer Rust Audio Effects Plugin",
        "elements": {
            "audioloudnorm": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Normalizes perceived loudness of an audio stream",
                "hierarchy": [
                    "GstAudioLoudNorm",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio loudness normalizer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: 192000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: 192000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F64LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "loudness-range-target": {
                        "blurb": "Loudness range target in LU",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "7",
                        "max": "20",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "loudness-target": {
                        "blurb": "Loudness target in LUFS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-24",
                        "max": "-5",
                        "min": "-70",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "max-true-peak": {
                        "blurb": "Maximum True Peak in dbTP",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-2",
                        "max": "0",
                        "min": "-9",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "offset": {
                        "blurb": "Offset Gain in LU",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "99",
                        "min": "-99",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiornnoise": {
                "author": "Philippe Normand <philn@igalia.com>",
                "description": "Removes noise from an audio stream",
                "hierarchy": [
                    "GstAudioRNNoise",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio denoise",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: 48000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: 48000\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "voice-activity-threshold": {
                        "blurb": "Threshold of the voice activity detector below which to mute the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ebur128level": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Measures different loudness metrics according to EBU R128",
                "hierarchy": [
                    "GstEbuR128Level",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Analyzer/Audio",
                "long-name": "EBU R128 Loudness Level Measurement",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2822399 ]\n       channels: [ 1, 63 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: { S16LE, S32LE, F32LE, F64LE }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2822399 ]\n       channels: [ 1, 63 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n         format: { S16LE, S32LE, F32LE, F64LE }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "interval": {
                        "blurb": "Interval in nanoseconds for posting messages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Selection of metrics to calculate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true-peak+sample-peak+loudness-range+global+short-term+momentary",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstEbuR128LevelMode",
                        "writable": true
                    },
                    "post-messages": {
                        "blurb": "Whether to post messages on the bus for each interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "reset": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "hrtfrender": {
                "author": "Tomasz Andrzejak <andreiltd@gmail.com>",
                "description": "Renders spatial sounds to a given position",
                "hierarchy": [
                    "GstHrtfRender",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Head-Related Transfer Function (HRTF) renderer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 64 ]\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: 2\n         layout: interleaved\n         format: F32LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "block-length": {
                        "blurb": "Block Length is the length of each slice",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "512",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "hrir-file": {
                        "blurb": "Head Transform Impulse Response file location to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "hrir-raw": {
                        "blurb": "Head Transform Impulse Response raw bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GBytes",
                        "writable": true
                    },
                    "interpolation-steps": {
                        "blurb": "Interpolation Steps is the amount of slices to cut source to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "spatial-objects": {
                        "blurb": "Spatial object Metadata to apply on input channels",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rsaudioecho": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Adds an echo or reverb effect to an audio stream",
                "hierarchy": [
                    "GstRsAudioEcho",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio echo",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: { F32LE, F64LE }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: { F32LE, F64LE }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "delay": {
                        "blurb": "Delay of the echo in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "feedback": {
                        "blurb": "Amount of feedback",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "intensity": {
                        "blurb": "Intensity of the echo",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.5",
                        "max": "1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "max-delay": {
                        "blurb": "Maximum delay of the echo in nanoseconds (can't be changed in PLAYING or PAUSED state)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsaudiofx",
        "license": "MPL",
        "other-types": {
            "GstEbuR128LevelMode": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Calculate momentary loudness (400ms)",
                        "name": "momentary",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Calculate short-term loudness (3s)",
                        "name": "short-term",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "Calculate relative threshold and global loudness",
                        "name": "global",
                        "value": "0x00000004"
                    },
                    {
                        "desc": "Calculate loudness range",
                        "name": "loudness-range",
                        "value": "0x00000008"
                    },
                    {
                        "desc": "Calculate sample peak",
                        "name": "sample-peak",
                        "value": "0x00000010"
                    },
                    {
                        "desc": "Calculate true peak",
                        "name": "true-peak",
                        "value": "0x00000020"
                    }
                ]
            }
        },
        "package": "gst-plugin-audiofx",
        "source": "gst-plugin-audiofx",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsclosedcaption": {
        "description": "GStreamer Rust Closed Caption Plugin",
        "elements": {
            "ccdetect": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Detect if valid closed captions are present in a stream",
                "hierarchy": [
                    "GstCCDetect",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video/ClosedCaption/Detect",
                "long-name": "Closed Caption Detect",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-708:\n         format: { cc_data, cdp }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: { cc_data, cdp }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cc608": {
                        "blurb": "Whether CEA608 captions (CC1/CC3) have been detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "cc708": {
                        "blurb": "Whether CEA708 captions (cc_data) have been detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "window": {
                        "blurb": "Window of time (in ns) to determine if captions exist in the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cea608overlay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Renders CEA 608 closed caption meta over raw video frames",
                "hierarchy": [
                    "GstCea608Overlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Overlay/Subtitle",
                "long-name": "Cea 608 overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { ABGR64_LE, BGRA64_LE, AYUV64, ARGB64_LE, ARGB64, RGBA64_LE, ABGR64_BE, BGRA64_BE, ARGB64_BE, RGBA64_BE, GBRA_12LE, GBRA_12BE, Y412_LE, Y412_BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, RGB10A2_LE, BGR10A2_LE, Y410, GBRA, ABGR, VUYA, BGRA, AYUV, ARGB, RGBA, A420, AV12, Y444_16LE, Y444_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, v210, UYVP, I420_10LE, I420_10BE, P010_10LE, NV12_10LE32, NV12_10LE40, P010_10BE, NV12_10BE_8L128, Y444, RGBP, GBR, BGRP, NV24, xBGR, BGRx, xRGB, RGBx, BGR, IYU2, v308, RGB, Y42B, NV61, NV16, VYUY, UYVY, YVYU, YUY2, I420, YV12, NV21, NV12, NV12_8L128, NV12_64Z32, NV12_4L4, NV12_32L32, NV12_16L32S, Y41B, IYU1, YVU9, YUV9, RGB16, BGR16, RGB15, BGR15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { ABGR64_LE, BGRA64_LE, AYUV64, ARGB64_LE, ARGB64, RGBA64_LE, ABGR64_BE, BGRA64_BE, ARGB64_BE, RGBA64_BE, GBRA_12LE, GBRA_12BE, Y412_LE, Y412_BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, RGB10A2_LE, BGR10A2_LE, Y410, GBRA, ABGR, VUYA, BGRA, AYUV, ARGB, RGBA, A420, AV12, Y444_16LE, Y444_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, v210, UYVP, I420_10LE, I420_10BE, P010_10LE, NV12_10LE32, NV12_10LE40, P010_10BE, NV12_10BE_8L128, Y444, RGBP, GBR, BGRP, NV24, xBGR, BGRx, xRGB, RGBx, BGR, IYU2, v308, RGB, Y42B, NV61, NV16, VYUY, UYVY, YVYU, YUY2, I420, YV12, NV21, NV12, NV12_8L128, NV12_64Z32, NV12_4L4, NV12_32L32, NV12_16L32S, Y41B, IYU1, YVU9, YUV9, RGB16, BGR16, RGB15, BGR15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "black-background": {
                        "blurb": "Whether a black background should be drawn behind text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "field": {
                        "blurb": "The field to render the caption for when available, (-1=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "1",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Duration after which to erase overlay when no cc data has arrived for the selected field",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "16000000000",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "cea608tojson": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Converts CEA-608 Closed Captions to JSON",
                "hierarchy": [
                    "GstCea608ToJson",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "CEA-608 to TT",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "unbuffered": {
                        "blurb": "Whether captions should be output at display time, instead of waiting to determine durations. Useful with live input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cea608tott": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Converts CEA-608 Closed Captions to SRT/VTT timed text",
                "hierarchy": [
                    "GstCea608ToTt",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "CEA-608 to TT",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-subtitle-vtt:\napplication/x-subtitle:\ntext/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "jsontovtt": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Converts JSON to WebVTT",
                "hierarchy": [
                    "GstJsonToVtt",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "JSON to WebVTT",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-json:\n         format: cea608\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-subtitle-vtt-fragmented:\n inline-headers: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "timeout": {
                        "blurb": "Duration after which to erase text when no data has arrived",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "16000000000",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "mccenc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Encodes MCC Closed Caption Files",
                "hierarchy": [
                    "GstMccEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/ClosedCaption",
                "long-name": "Mcc Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-708:\n         format: cdp\n      framerate: { (fraction)24/1, (fraction)25/1, (fraction)30000/1001, (fraction)30/1, (fraction)50/1, (fraction)60000/1001, (fraction)60/1 }\nclosedcaption/x-cea-608:\n         format: s334-1a\n      framerate: { (fraction)24/1, (fraction)25/1, (fraction)30000/1001, (fraction)30/1, (fraction)50/1, (fraction)60000/1001, (fraction)60/1 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-mcc:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "creation-date": {
                        "blurb": "Creation date for the output file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GDateTime",
                        "writable": true
                    },
                    "uuid": {
                        "blurb": "UUID for the output file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "mccparse": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Parses MCC Closed Caption Files",
                "hierarchy": [
                    "GstMccParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Parser/ClosedCaption",
                "long-name": "Mcc Parse",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-mcc:\n        version: { (int)1, (int)2 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-708:\n         format: cdp\n      framerate: [ 1/2147483647, 2147483647/1 ]\nclosedcaption/x-cea-608:\n         format: s334-1a\n      framerate: [ 1/2147483647, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "sccenc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>, Jordan Petridis <jordan@centricular.com>",
                "description": "Encodes SCC Closed Caption Files",
                "hierarchy": [
                    "GstSccEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/ClosedCaption",
                "long-name": "Scc Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n      framerate: { (fraction)30000/1001, (fraction)30/1 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-scc:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "output-padding": {
                        "blurb": "Whether the encoder should output padding captions. The element will never add padding, but will encode padding buffers it receives if this property is set to true.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "sccparse": {
                "author": "Sebastian Dröge <sebastian@centricular.com>, Jordan Petridis <jordan@centricular.com>",
                "description": "Parses SCC Closed Caption Files",
                "hierarchy": [
                    "GstSccParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Parser/ClosedCaption",
                "long-name": "Scc Parse",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-scc:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n      framerate: { (fraction)30000/1001, (fraction)30/1 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "transcriberbin": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Transcribes audio and adds it as closed captions",
                "hierarchy": [
                    "GstTranscriberBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Audio / Video / Text",
                "long-name": "TranscriberBin",
                "pad-templates": {
                    "sink_audio": {
                        "caps": "audio/x-raw:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "sink_video": {
                        "caps": "video/x-raw:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_audio": {
                        "caps": "audio/x-raw:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "src_video": {
                        "caps": "video/x-raw:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "accumulate-time": {
                        "blurb": "Cut-off time for textwrap accumulation, in milliseconds (0=do not accumulate). Set this to a non-default value if you plan to switch to pop-on mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "caption-source": {
                        "blurb": "Caption source to use. If \"Transcription\" or \"Inband\" is selected, the caption meta of the other source will be dropped by transcriberbin",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "both (0)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstTranscriberBinCaptionSource",
                        "writable": true
                    },
                    "cc-caps": {
                        "blurb": "The expected format of the closed captions",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "closedcaption/x-cea-608, format=(string)raw",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of milliseconds to allow the transcriber",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Which closed caption mode to operate in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "roll-up2 (2)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstTtToCea608Mode",
                        "writable": true
                    },
                    "passthrough": {
                        "blurb": "Whether transcription should occur",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "transcriber": {
                        "blurb": "The transcriber element to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "tttocea608": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Converts timed text to CEA-608 Closed Captions",
                "hierarchy": [
                    "GstTtToCea608",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "TT to CEA-608",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\napplication/x-json:\n         format: cea608\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "closedcaption/x-cea-608:\n         format: raw\n      framerate: [ 1/2147483647, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "Which mode to operate in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "roll-up2 (2)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstTtToCea608Mode",
                        "writable": true
                    },
                    "origin-column": {
                        "blurb": "Origin column",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "31",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "origin-row": {
                        "blurb": "Origin row, (-1=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "14",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "roll-up-timeout": {
                        "blurb": "Duration after which to erase display memory in roll-up mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "tttojson": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Encodes Timed Text to JSON",
                "hierarchy": [
                    "GstTtToJson",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Encoder/ClosedCaption",
                "long-name": "Timed text to JSON encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-json:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "Which mode to operate in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "roll-up2 (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstTtToCea608Mode",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsclosedcaption",
        "license": "MPL",
        "other-types": {
            "GstTranscriberBinCaptionSource": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Both",
                        "name": "both",
                        "value": "0"
                    },
                    {
                        "desc": "Transcription",
                        "name": "transcription",
                        "value": "1"
                    },
                    {
                        "desc": "Inband",
                        "name": "inband",
                        "value": "2"
                    }
                ]
            },
            "GstTtToCea608Mode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "PopOn",
                        "name": "pop-on",
                        "value": "0"
                    },
                    {
                        "desc": "PaintOn",
                        "name": "paint-on",
                        "value": "1"
                    },
                    {
                        "desc": "RollUp2",
                        "name": "roll-up2",
                        "value": "2"
                    },
                    {
                        "desc": "RollUp3",
                        "name": "roll-up3",
                        "value": "3"
                    },
                    {
                        "desc": "RollUp4",
                        "name": "roll-up4",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "gst-plugin-closedcaption",
        "source": "gst-plugin-closedcaption",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsfile": {
        "description": "GStreamer Rust File Source/Sink Plugin",
        "elements": {
            "rsfilesink": {
                "author": "François Laignel <fengalin@free.fr>, Luis de Bethencourt <luisbg@osg.samsung.com>",
                "description": "Write stream to a file",
                "hierarchy": [
                    "GstRsFileSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Sink/File",
                "long-name": "File Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Location of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rsfilesrc": {
                "author": "François Laignel <fengalin@free.fr>, Sebastian Dröge <sebastian@centricular.com>",
                "description": "Read stream from a file",
                "hierarchy": [
                    "GstRsFileSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/File",
                "long-name": "File Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Location of the file to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsfile",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-file",
        "source": "gst-plugin-file",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsflv": {
        "description": "GStreamer Rust FLV Plugin",
        "elements": {
            "rsflvdemux": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Demuxes FLV Streams",
                "hierarchy": [
                    "GstRsFlvDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "FLV Demuxer",
                "pad-templates": {
                    "audio": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\naudio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n         format: { U8, S16LE }\naudio/x-adpcm:\n         layout: swf\naudio/x-nellymoser:\naudio/x-alaw:\naudio/x-mulaw:\naudio/mpeg:\n    mpegversion: 4\n         framed: true\n  stream-format: raw\naudio/x-speex:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "video/x-flv:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video": {
                        "caps": "video/x-flash-video:\n     flvversion: 1\nvideo/x-flash-screen:\nvideo/x-vp6-flash:\nvideo/x-vp6-flash-alpha:\nvideo/x-flash-screen2:\nvideo/x-h264:\n  stream-format: avc\nvideo/x-h263:\nvideo/mpeg:\n    mpegversion: 4\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsflv",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-flavors",
        "source": "gst-plugin-flavors",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsonvif": {
        "description": "GStreamer Rust ONVIF Plugin",
        "elements": {
            "onvifmetadatacombiner": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "ONVIF metadata combiner",
                "hierarchy": [
                    "GstOnvifMetadataCombiner",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Metadata/Combiner",
                "long-name": "ONVIF metadata combiner",
                "pad-templates": {
                    "media": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "meta": {
                        "caps": "application/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "onvifmetadataoverlay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Renders ONVIF analytics meta over raw video frames",
                "hierarchy": [
                    "GstOnvifMetadataOverlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Video/Overlay",
                "long-name": "ONVIF Metadata overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { ABGR64_LE, BGRA64_LE, AYUV64, ARGB64_LE, ARGB64, RGBA64_LE, ABGR64_BE, BGRA64_BE, ARGB64_BE, RGBA64_BE, GBRA_12LE, GBRA_12BE, Y412_LE, Y412_BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, RGB10A2_LE, BGR10A2_LE, Y410, GBRA, ABGR, VUYA, BGRA, AYUV, ARGB, RGBA, A420, AV12, Y444_16LE, Y444_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, v210, UYVP, I420_10LE, I420_10BE, P010_10LE, NV12_10LE32, NV12_10LE40, P010_10BE, NV12_10BE_8L128, Y444, RGBP, GBR, BGRP, NV24, xBGR, BGRx, xRGB, RGBx, BGR, IYU2, v308, RGB, Y42B, NV61, NV16, VYUY, UYVY, YVYU, YUY2, I420, YV12, NV21, NV12, NV12_8L128, NV12_64Z32, NV12_4L4, NV12_32L32, NV12_16L32S, Y41B, IYU1, YVU9, YUV9, RGB16, BGR16, RGB15, BGR15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { ABGR64_LE, BGRA64_LE, AYUV64, ARGB64_LE, ARGB64, RGBA64_LE, ABGR64_BE, BGRA64_BE, ARGB64_BE, RGBA64_BE, GBRA_12LE, GBRA_12BE, Y412_LE, Y412_BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, RGB10A2_LE, BGR10A2_LE, Y410, GBRA, ABGR, VUYA, BGRA, AYUV, ARGB, RGBA, A420, AV12, Y444_16LE, Y444_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, v210, UYVP, I420_10LE, I420_10BE, P010_10LE, NV12_10LE32, NV12_10LE40, P010_10BE, NV12_10BE_8L128, Y444, RGBP, GBR, BGRP, NV24, xBGR, BGRx, xRGB, RGBx, BGR, IYU2, v308, RGB, Y42B, NV61, NV16, VYUY, UYVY, YVYU, YUY2, I420, YV12, NV21, NV12, NV12_8L128, NV12_64Z32, NV12_4L4, NV12_32L32, NV12_16L32S, Y41B, IYU1, YVU9, YUV9, RGB16, BGR16, RGB15, BGR15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "font-desc": {
                        "blurb": "Pango font description of font to be used for rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "monospace 12",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "onvifmetadataparse": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Parses ONVIF Timed XML Metadata",
                "hierarchy": [
                    "GstOnvifMetadataParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Metadata/Parser",
                "long-name": "ONVIF Metadata Parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-onvif-metadata:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-onvif-metadata:\n         parsed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "latency": {
                        "blurb": "Maximum latency to introduce for reordering metadata (max=auto: 6s if unparsed input, 0s if parsed input)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-lateness": {
                        "blurb": "Drop metadata that delayed by more than this",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtponvifmetadatadepay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "ONVIF metadata RTP depayloader",
                "hierarchy": [
                    "GstOnvifMetadataDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Depayloader/Network/RTP",
                "long-name": "ONVIF metadata RTP depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: application\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: VND.ONVIF.METADATA\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-onvif-metadata:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "rtponvifmetadatapay": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "ONVIF metadata RTP payloader",
                "hierarchy": [
                    "GstOnvifMetadataPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Payloader/Network/RTP",
                "long-name": "ONVIF metadata RTP payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-onvif-metadata:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: application\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: VND.ONVIF.METADATA\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrsonvif",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-onvif",
        "source": "gst-plugin-onvif",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rspng": {
        "description": "GStreamer Rust PNG encoder/decoder",
        "elements": {
            "rspngenc": {
                "author": "Natanael Mojica <neithanmo@gmail>",
                "description": "PNG encoder",
                "hierarchy": [
                    "GstRsPngEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Encoder/Video",
                "long-name": "PNG encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { GRAY8, GRAY16_BE, RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/png:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "compression-level": {
                        "blurb": "Selects the compression algorithm to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "default (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRsPngCompressionLevel",
                        "writable": true
                    },
                    "filter": {
                        "blurb": "Selects the filter type to applied",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "nofilter (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstRsPngFilterType",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrspng",
        "license": "MIT/X11",
        "other-types": {
            "GstRsPngCompressionLevel": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Default: Use the default compression level.",
                        "name": "default",
                        "value": "0"
                    },
                    {
                        "desc": "Fast: A fast compression algorithm.",
                        "name": "fast",
                        "value": "1"
                    },
                    {
                        "desc": "Best: Uses the algorithm with the best results.",
                        "name": "best",
                        "value": "2"
                    },
                    {
                        "desc": "Huffman: Huffman compression.",
                        "name": "huffman",
                        "value": "3"
                    },
                    {
                        "desc": "Rle: Rle compression.",
                        "name": "rle",
                        "value": "4"
                    }
                ]
            },
            "GstRsPngFilterType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "NoFilter: No filtering applied to the output.",
                        "name": "nofilter",
                        "value": "0"
                    },
                    {
                        "desc": "Sub: filter applied to each pixel.",
                        "name": "sub",
                        "value": "1"
                    },
                    {
                        "desc": "Up: Up filter similar to Sub.",
                        "name": "up",
                        "value": "2"
                    },
                    {
                        "desc": "Avg: The Average filter uses the average of the two neighboring pixels.",
                        "name": "avg",
                        "value": "3"
                    },
                    {
                        "desc": "Paeth: The Paeth filter computes a simple linear function of the three neighboring pixels.",
                        "name": "paeth",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "gst-plugin-png",
        "source": "gst-plugin-png",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsrtp": {
        "description": "GStreamer Rust RTP Plugin",
        "elements": {
            "rtpav1depay": {
                "author": "Vivienne Watermeier <vwatermeier@igalia.com>",
                "description": "Depayload AV1 from RTP packets",
                "hierarchy": [
                    "GstRtpAv1Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP AV1 Depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: AV1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-av1:\n         parsed: true\n  stream-format: obu-stream\n      alignment: tu\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpav1pay": {
                "author": "Vivienne Watermeier <vwatermeier@igalia.com>",
                "description": "Payload AV1 as RTP packets",
                "hierarchy": [
                    "GstRtpAv1Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP AV1 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-av1:\n         parsed: true\n  stream-format: obu-stream\n      alignment: obu\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: AV1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "rtpgccbwe": {
                "author": "Thibault Saunier <tsaunier@igalia.com>",
                "description": "Estimates current network bandwidth using the Google Congestion Control algorithm notifying about it through the 'bitrate' property",
                "hierarchy": [
                    "GstRtpGCCBwE",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/WebRTC/RTP/Filter",
                "long-name": "Google Congestion Control bandwidth estimator",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "estimated-bitrate": {
                        "blurb": "Currently estimated bitrate. Can be set before starting\n                     the element to configure the starting bitrate, in which case the\n                     encoder should also use it as target bitrate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2048000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-bitrate": {
                        "blurb": "Maximal bitrate to use (in bit/sec) when computing it through the bandwidth estimation algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8192000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "min-bitrate": {
                        "blurb": "Minimal bitrate to use (in bit/sec) when computing it through the bandwidth estimation algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsrtp",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-rtp",
        "source": "gst-plugin-rtp",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rstracers": {
        "description": "GStreamer Rust tracers plugin",
        "elements": {},
        "filename": "gstrstracers",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-tracers",
        "source": "gst-plugin-tracers",
        "tracers": {
            "buffer-lateness": {},
            "pipeline-snapshot": {},
            "queue-levels": {}
        },
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rsvideofx": {
        "description": "GStreamer Rust Video Effects Plugin",
        "elements": {
            "colordetect": {
                "author": "Philippe Normand <philn@igalia.com>",
                "description": "Detects the dominant color of a video",
                "hierarchy": [
                    "GstColorDetect",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "Dominant color detection",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA, ARGB, BGR, BGRA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA, ARGB, BGR, BGRA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "max-colors": {
                        "blurb": "Actual colors count can be lower depending on the image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "255",
                        "min": "2",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "A step in pixels to improve performance",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "10",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "roundedcorners": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Adds rounded corners to video",
                "hierarchy": [
                    "GstRoundedCorners",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Converter/Video",
                "long-name": "Rounded Corners",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { I420, A420 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "border-radius-px": {
                        "blurb": "Draw rounded corners with given border radius",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "videocompare": {
                "author": "Rafael Caricio <rafael@caricio.com>",
                "description": "Compare similarity of video frames",
                "hierarchy": [
                    "GstVideoCompare",
                    "GstVideoAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "Image comparison",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstVideoAggregatorPad"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstVideoAggregatorPad"
                    }
                },
                "properties": {
                    "hash-algo": {
                        "blurb": "Which hashing algorithm to use for image comparisons",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "blockhash (4)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstVideoCompareHashAlgorithm",
                        "writable": true
                    },
                    "max-dist-threshold": {
                        "blurb": "Maximum distance threshold to emit messages when an image is detected, by default emits only on exact match",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrsvideofx",
        "license": "MPL",
        "other-types": {
            "GstVideoCompareHashAlgorithm": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Mean: The Mean hashing algorithm.",
                        "name": "mean",
                        "value": "0"
                    },
                    {
                        "desc": "Gradient: The Gradient hashing algorithm.",
                        "name": "gradient",
                        "value": "1"
                    },
                    {
                        "desc": "VertGradient: The Vertical-Gradient hashing algorithm.",
                        "name": "vertgradient",
                        "value": "2"
                    },
                    {
                        "desc": "DoubleGradient: The Double-Gradient hashing algorithm.",
                        "name": "doublegradient",
                        "value": "3"
                    },
                    {
                        "desc": "Blockhash: The Blockhash (block median value perceptual hash) algorithm.",
                        "name": "blockhash",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "gst-plugin-videofx",
        "source": "gst-plugin-videofx",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rswebp": {
        "description": "GStreamer WebP Plugin",
        "elements": {
            "rswebpdec": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Decodes potentially animated WebP images",
                "hierarchy": [
                    "GstRsWebPDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "WebP decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "image/webp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstrswebp",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-webp",
        "source": "gst-plugin-webp",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "rswebrtc": {
        "description": "GStreamer plugin for high level WebRTC elements and a simple signaling server",
        "elements": {
            "webrtcsink": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "WebRTC sink",
                "hierarchy": [
                    "GstWebRTCSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstNavigation"
                ],
                "klass": "Sink/Network/WebRTC",
                "long-name": "WebRTCSink",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n\nvideo/x-raw(memory:CUDAMemory):\n\nvideo/x-raw(memory:GLMemory):\n\nvideo/x-raw(memory:NVMM):\n",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "audio-caps": {
                        "blurb": "Governs what audio codecs will be proposed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "audio/x-opus",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "congestion-control": {
                        "blurb": "Defines how congestion is controlled, if at all",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "gcc (2)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstWebRTCSinkCongestionControl",
                        "writable": true
                    },
                    "do-fec": {
                        "blurb": "Whether the element should negotiate and send FEC data",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-retransmission": {
                        "blurb": "Whether the element should offer to honor retransmission requests",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-data-channel-navigation": {
                        "blurb": "Enable navigation events through a dedicated WebRTCDataChannel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-bitrate": {
                        "blurb": "Minimal bitrate to use (in bit/sec) when computing it through the congestion control algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8192000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "meta": {
                        "blurb": "Free form metadata about the producer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "min-bitrate": {
                        "blurb": "Minimal bitrate to use (in bit/sec) when computing it through the congestion control algorithm",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "start-bitrate": {
                        "blurb": "Start bitrate to use (in bit/sec)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2048000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Statistics for the current consumers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-webrtcsink-stats;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "stun-server": {
                        "blurb": "The STUN server of the form stun://hostname:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stun://stun.l.google.com:19302",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "turn-server": {
                        "blurb": "The TURN server of the form turn(s)://username:password@host:port.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "video-caps": {
                        "blurb": "Governs what video codecs will be proposed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-vp8; video/x-h264; video/x-vp9; video/x-h265",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "consumer-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "consumer-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "encoder-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "get-sessions": {
                        "action": true,
                        "args": [],
                        "return-type": "GStrv",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstrswebrtc",
        "license": "MPL-2.0",
        "other-types": {
            "GstWebRTCSinkCongestionControl": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Disabled: no congestion control is applied",
                        "name": "disabled",
                        "value": "0"
                    },
                    {
                        "desc": "Homegrown: simple sender-side heuristic",
                        "name": "homegrown",
                        "value": "1"
                    },
                    {
                        "desc": "Google Congestion Control algorithm",
                        "name": "gcc",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "gst-plugin-webrtc",
        "source": "gst-plugin-webrtc",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "sodium": {
        "description": "GStreamer plugin for libsodium-based file encryption and decryption",
        "elements": {
            "sodiumdecrypter": {
                "author": "Jordan Petridis <jordan@centricular.com>",
                "description": "libsodium-based file decrypter",
                "hierarchy": [
                    "GstSodiumDecryptor",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Decrypter",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-sodium-encrypted:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "receiver-key": {
                        "blurb": "The private key of the Receiver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GBytes",
                        "writable": true
                    },
                    "sender-key": {
                        "blurb": "The public key of the Sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GBytes",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "sodiumencrypter": {
                "author": "Jordan Petridis <jordan@centricular.com>",
                "description": "libsodium-based file encrypter",
                "hierarchy": [
                    "GstSodiumEncrypter",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Encrypter",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-sodium-encrypted:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "block-size": {
                        "blurb": "The block-size of the chunks",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "32768",
                        "max": "-1",
                        "min": "1024",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "receiver-key": {
                        "blurb": "The public key of the Receiver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GBytes",
                        "writable": true
                    },
                    "sender-key": {
                        "blurb": "The private key of the Sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GBytes",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstsodium",
        "license": "MIT/X11",
        "other-types": {},
        "package": "gst-plugin-sodium",
        "source": "gst-plugin-sodium",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "spotify": {
        "description": "GStreamer Spotify Plugin",
        "elements": {
            "spotifyaudiosrc": {
                "author": "Guillaume Desmottes <guillaume@desmottes.be>",
                "description": "Spotify source",
                "hierarchy": [
                    "GstSpotifyAudioSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Audio",
                "long-name": "Spotify source",
                "pad-templates": {
                    "src": {
                        "caps": "application/ogg:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cache-credentials": {
                        "blurb": "Directory where to cache Spotify credentials",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-files": {
                        "blurb": "Directory where to cache downloaded files from Spotify",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "cache-max-size": {
                        "blurb": "The max allowed size of the cache, in bytes, or 0 to disable the cache limit",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "password": {
                        "blurb": "Spotify device password from https://www.spotify.com/us/account/set-device-password/",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "track": {
                        "blurb": "Spotify track URI, in the form 'spotify:track:$SPOTIFY_ID'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "username": {
                        "blurb": "Spotify device username from https://www.spotify.com/us/account/set-device-password/",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstspotify",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-spotify",
        "source": "gst-plugin-spotify",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "textahead": {
        "description": "GStreamer Plugin for displaying upcoming text buffers ahead of time",
        "elements": {
            "textahead": {
                "author": "Guillaume Desmottes <guillaume@desmottes.be>",
                "description": "Display upcoming text buffers ahead",
                "hierarchy": [
                    "GstTextAhead",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "long-name": "Text Ahead",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: { utf8, pango-markup }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: pango-markup\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ahead-attributes": {
                        "blurb": "Pango span attributes to set on the ahead text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "size=\"smaller\"",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "buffer-start-segment": {
                        "blurb": "Generate a buffer at the start of the segment with ahead text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "current-attributes": {
                        "blurb": "Pango span attributes to set on the text from the current buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "size=\"larger\"",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "n-ahead": {
                        "blurb": "The number of ahead text buffers to display along with the current one",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "n-previous": {
                        "blurb": "The number of previous text buffers to display before the current one",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "previous-attributes": {
                        "blurb": "Pango span attributes to set on the previous text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "size=\"smaller\"",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "separator": {
                        "blurb": "Text inserted between each text buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "\n",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gsttextahead",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-textahead",
        "source": "gst-plugin-textahead",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "textwrap": {
        "description": "GStreamer Text Wrap Plugin",
        "elements": {
            "textwrap": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Breaks text into fixed-size lines, with optional hyphenation",
                "hierarchy": [
                    "GstTextWrap",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Text/Filter",
                "long-name": "Text Wrapper",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "accumulate-time": {
                        "blurb": "Cut-off time for input text accumulation (0=do not accumulate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "columns": {
                        "blurb": "Maximum number of columns for any given line",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "32",
                        "max": "-1",
                        "min": "1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "dictionary": {
                        "blurb": "Path to a dictionary to load at runtime to perform hyphenation, see <https://docs.rs/crate/hyphenation/0.7.1> for more information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "lines": {
                        "blurb": "Split input buffer into output buffers with max lines (0=do not split)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttextwrap",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-textwrap",
        "source": "gst-plugin-textwrap",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "threadshare": {
        "description": "GStreamer Threadshare Plugin",
        "elements": {
            "ts-appsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Thread-sharing app source",
                "hierarchy": [
                    "GstTsAppSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Generic",
                "long-name": "Thread-sharing app source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "Caps to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "do-timestamp": {
                        "blurb": "Timestamp buffers with the current running time on arrival",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-buffers": {
                        "blurb": "Maximum number of buffers to queue up",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "end-of-stream": {
                        "action": true,
                        "args": [],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "push-buffer": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstBuffer"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            },
            "ts-audiotestsrc": {
                "author": "François Laignel <fengalin@free.fr>",
                "description": "Thread-sharing audio test source",
                "hierarchy": [
                    "TsAudioTestSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Test",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 8000, 2147483646 ]\n       channels: [ 1, 2147483646 ]\n         layout: interleaved\n         format: S16LE\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "buffer-duration": {
                        "blurb": "Buffer duration in ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "do-timestamp": {
                        "blurb": "Apply current stream time to buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Whether to act as a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "num-buffers": {
                        "blurb": "Number of buffers to output before sending EOS (-1 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-input-selector": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Simple input selector element",
                "hierarchy": [
                    "GstTsInputSelector",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Thread-sharing input selector",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "active-pad": {
                        "blurb": "Currently active pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstPad",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-jitterbuffer": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "Simple jitterbuffer",
                "hierarchy": [
                    "GstTsJitterBuffer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Thread-sharing jitterbuffer",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "do-lost": {
                        "blurb": "Send an event downstream when a packet is lost",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of ms to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-dropout-time": {
                        "blurb": "The maximum time (milliseconds) of missing packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-misorder-time": {
                        "blurb": "The maximum time (milliseconds) of misordered packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-jitterbuffer-stats, num-pushed=(guint64)0, num-lost=(guint64)0, num-late=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-pt-map": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-pt-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    }
                }
            },
            "ts-proxysink": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Thread-sharing proxy sink",
                "hierarchy": [
                    "GstTsProxySink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Generic",
                "long-name": "Thread-sharing proxy sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "proxy-context": {
                        "blurb": "Context name of the proxy to share with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-proxysrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Thread-sharing proxy source",
                "hierarchy": [
                    "GstTsProxySrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Generic",
                "long-name": "Thread-sharing proxy source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-buffers": {
                        "blurb": "Maximum number of buffers to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-bytes": {
                        "blurb": "Maximum number of bytes to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Maximum number of nanoseconds to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "proxy-context": {
                        "blurb": "Context name of the proxy to share with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-queue": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Simple data queue",
                "hierarchy": [
                    "GstTsQueue",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Thread-sharing queue",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-buffers": {
                        "blurb": "Maximum number of buffers to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-bytes": {
                        "blurb": "Maximum number of bytes to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Maximum number of nanoseconds to queue (0=unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551614",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-tcpclientsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>, LEE Dongjun <redongjun@gmail.com>",
                "description": "Receives data over the network via TCP",
                "hierarchy": [
                    "GstTsTcpClientSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "long-name": "Thread-sharing TCP client source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "blocksize": {
                        "blurb": "Size in bytes to read per buffer (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4096",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "Caps to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "host": {
                        "blurb": "The host IP address to receive packets from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port to receive packets from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4953",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "ts-udpsink": {
                "author": "Mathieu <mathieu@centricular.com>",
                "description": "Thread-sharing UDP sink",
                "hierarchy": [
                    "GstTsUdpSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "Thread-sharing UDP sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "auto-multicast": {
                        "blurb": "Automatically join/leave the multicast groups, FALSE means user has to do it himself",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "bind-address": {
                        "blurb": "Address to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-address-v6": {
                        "blurb": "Address to bind the V6 socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "::",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-port": {
                        "blurb": "Port to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "bind-port-v6": {
                        "blurb": "Port to bind the V6 socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "clients": {
                        "blurb": "A comma separated list of host:port pairs with destinations",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1:5004",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "Set the multicast loop parameter.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "qos-dscp": {
                        "blurb": "Quality of Service, differentiated services code point (-1 default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "63",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "Socket to use for UDP transmission. (None == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "socket-v6": {
                        "blurb": "IPV6 Socket to use for UDP transmission. (None == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ttl": {
                        "blurb": "Used for setting the unicast TTL parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "64",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "ttl-mc": {
                        "blurb": "Used for setting the multicast TTL parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "used-socket": {
                        "blurb": "Socket currently in use for UDP transmission. (None = no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    },
                    "used-socket-v6": {
                        "blurb": "V6 Socket currently in use for UDP transmission. (None = no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    }
                },
                "rank": "none",
                "signals": {
                    "add": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "remove": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "ts-udpsrc": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Receives data over the network via UDP",
                "hierarchy": [
                    "GstTsUdpSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "long-name": "Thread-sharing UDP source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "address": {
                        "blurb": "Address/multicast group to listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "Caps to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "context": {
                        "blurb": "Context name to share threads with",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "context-wait": {
                        "blurb": "Throttle poll loop to run at most once every this many ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "mtu": {
                        "blurb": "Maximum expected packet size. This directly defines the allocation size of the receive buffer pool",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1492",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port to listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5004",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "retrieve-sender-address": {
                        "blurb": "Whether to retrieve the sender address and add it to buffers as meta. Disabling this might result in minor performance improvements in certain scenarios",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "reuse": {
                        "blurb": "Allow reuse of the port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "Socket to use for UDP reception. (None == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "used-socket": {
                        "blurb": "Socket currently in use for UDP reception. (None = no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstthreadshare",
        "license": "LGPL",
        "other-types": {},
        "package": "gst-plugin-threadshare",
        "source": "gst-plugin-threadshare",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "togglerecord": {
        "description": "GStreamer Toggle Record Plugin",
        "elements": {
            "togglerecord": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Valve that ensures multiple streams start/end at the same time",
                "hierarchy": [
                    "GstToggleRecord",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Toggle Record",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "is-live": {
                        "blurb": "Live mode: no \"gap eating\", forward incoming segment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "record": {
                        "blurb": "Enable/disable recording",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "recording": {
                        "blurb": "Whether recording is currently taking place",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttogglerecord",
        "license": "MPL-2.0",
        "other-types": {},
        "package": "gst-plugin-togglerecord",
        "source": "gst-plugin-togglerecord",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "uriplaylistbin": {
        "description": "GStreamer Playlist Playback Plugin",
        "elements": {
            "uriplaylistbin": {
                "author": "Guillaume Desmottes <guillaume.desmottes@onestream.live>",
                "description": "Sequentially play uri streams",
                "hierarchy": [
                    "GstUriPlaylistBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Source",
                "long-name": "Playlist Source",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "text_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "current-iteration": {
                        "blurb": "The index of the current playlist iteration, or 0 if the iterations property is 0 (unlimited playlist)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-uri-index": {
                        "blurb": "The index from the uris property of the current URI being played",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "iterations": {
                        "blurb": "Number of time the playlist items should be played each (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "uris": {
                        "blurb": "URIs of the medias to play",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GStrv",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsturiplaylistbin",
        "license": "MPL",
        "other-types": {},
        "package": "gst-plugin-uriplaylistbin",
        "source": "gst-plugin-uriplaylistbin",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    },
    "webrtchttp": {
        "description": "GStreamer WebRTC Plugin for WebRTC HTTP protocols (WHIP/WHEP)",
        "elements": {
            "whepsrc": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "A bin to stream media using the WebRTC HTTP Egress Protocol (WHEP)",
                "hierarchy": [
                    "GstWhepSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Network/WebRTC",
                "long-name": "WHEP Source Bin",
                "pad-templates": {
                    "src_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "audio-caps": {
                        "blurb": "Governs what audio codecs will be proposed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "audio/x-opus",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "auth-token": {
                        "blurb": "Authentication token to use, will be sent in the HTTP Header as 'Bearer <auth-token>'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ice-transport-policy": {
                        "blurb": "The policy to apply for ICE transport",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "all (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRsWebRTCICETransportPolicy",
                        "writable": true
                    },
                    "stun-server": {
                        "blurb": "The STUN server of the form stun://hostname:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout WHEP endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "turn-server": {
                        "blurb": "The TURN server of the form turn(s)://username:password@host:port.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-link-headers": {
                        "blurb": "Use link headers to configure STUN/TURN servers if present in WHEP endpoint response.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "video-caps": {
                        "blurb": "Governs what video codecs will be proposed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-vp8; video/x-h264; video/x-vp9; video/x-h265; video/x-av1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "whep-endpoint": {
                        "blurb": "The WHEP server endpoint to POST SDP offer to.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "whipsink": {
                "author": "Taruntej Kanakamalla <taruntej@asymptotic.io>",
                "description": "A bin to stream media using the WebRTC HTTP Ingestion Protocol (WHIP)",
                "hierarchy": [
                    "GstWhipSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Network/WebRTC",
                "long-name": "WHIP Sink Bin",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "auth-token": {
                        "blurb": "Authentication token to use, will be sent in the HTTP Header as 'Bearer <auth-token>'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ice-transport-policy": {
                        "blurb": "The policy to apply for ICE transport",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "all (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRsWebRTCICETransportPolicy",
                        "writable": true
                    },
                    "stun-server": {
                        "blurb": "The STUN server of the form stun://hostname:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout WHIP endpoint requests (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "turn-server": {
                        "blurb": "The TURN server of the form turn(s)://username:password@host:port.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-link-headers": {
                        "blurb": "Use link headers to configure ice-servers from the WHIP server response to the POST request.\n                        If set to TRUE and the WHIP server returns valid ice-servers,\n                        this property overrides the ice-servers values set using the stun-server and turn-server properties.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "whip-endpoint": {
                        "blurb": "The WHIP server endpoint to POST SDP offer to.\n                        e.g.: https://example.com/whip/endpoint/room1234",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstwebrtchttp",
        "license": "MPL",
        "other-types": {
            "GstRsWebRTCICETransportPolicy": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "All: get both STUN and TURN candidate pairs",
                        "name": "all",
                        "value": "0"
                    },
                    {
                        "desc": "Relay: get only TURN candidate pairs",
                        "name": "relay",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "gst-plugin-webrtchttp",
        "source": "gst-plugin-webrtchttp",
        "tracers": {},
        "url": "https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs"
    }
}